
// Generated by Akka gRPC. DO NOT EDIT.
package io.cloudstate.protocol;

import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;

import io.cloudstate.protocol.Crdt;
import io.cloudstate.protocol.CrdtClientPowerApi;
import io.grpc.ManagedChannel;
import io.grpc.MethodDescriptor;

import static io.cloudstate.protocol.Crdt.Serializers.*;

import scala.concurrent.ExecutionContext;


import akka.grpc.javadsl.StreamResponseRequestBuilder;


public abstract class CrdtClient extends CrdtClientPowerApi implements Crdt, AkkaGrpcClient {
  public static final io.cloudstate.protocol.CrdtClient create(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
    return new DefaultCrdtClient(settings, mat, ec);
  }

  protected final static class DefaultCrdtClient extends io.cloudstate.protocol.CrdtClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultCrdtClient(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
        this.settings = settings;
        this.mat = mat;
        this.ec = ec;
        this.clientState = new ClientState(settings, mat, ec);
        this.options = NettyClientUtils.callOptions(settings);

        if (mat instanceof ActorMaterializer) {
          ((ActorMaterializer) mat).system().getWhenTerminated().whenComplete((v, e) -> close());
        }
      }

  
    
      
        
          private final StreamResponseRequestBuilder<akka.stream.javadsl.Source<io.cloudstate.protocol.CrdtProto.CrdtStreamIn, akka.NotUsed>, io.cloudstate.protocol.CrdtProto.CrdtStreamOut> handleRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
            return new JavaBidirectionalStreamingRequestBuilder<>(
                                 handleDescriptor, "cloudstate.crdt.Crdt.handle", channel, options, settings, ec);
          }
        
      
    
  

      

        /**
         * For access to method metadata use the parameterless version of handle
         */
        public akka.stream.javadsl.Source<io.cloudstate.protocol.CrdtProto.CrdtStreamOut, akka.NotUsed> handle(akka.stream.javadsl.Source<io.cloudstate.protocol.CrdtProto.CrdtStreamIn, akka.NotUsed> request) {
          return handle().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer handle(io.cloudstate.protocol.CrdtProto.CrdtStreamIn) if possible.
         */
        
          public StreamResponseRequestBuilder<akka.stream.javadsl.Source<io.cloudstate.protocol.CrdtProto.CrdtStreamIn, akka.NotUsed>, io.cloudstate.protocol.CrdtProto.CrdtStreamOut> handle()
        
        {
          return clientState.withChannel( this::handleRequestBuilder);
        }
      

      
        private static MethodDescriptor<io.cloudstate.protocol.CrdtProto.CrdtStreamIn, io.cloudstate.protocol.CrdtProto.CrdtStreamOut> handleDescriptor =
          MethodDescriptor.<io.cloudstate.protocol.CrdtProto.CrdtStreamIn, io.cloudstate.protocol.CrdtProto.CrdtStreamOut>newBuilder()
            .setType(
  
  
  
  MethodDescriptor.MethodType.BIDI_STREAMING 
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("cloudstate.crdt.Crdt", "handle"))
            .setRequestMarshaller(new ProtoMarshaller<io.cloudstate.protocol.CrdtProto.CrdtStreamIn>(CrdtStreamInSerializer))
            .setResponseMarshaller(new ProtoMarshaller<io.cloudstate.protocol.CrdtProto.CrdtStreamOut>(CrdtStreamOutSerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



