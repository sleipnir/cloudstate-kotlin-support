
// Generated by Akka gRPC. DO NOT EDIT.
package io.cloudstate.protocol;

import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;
import akka.stream.ActorMaterializer;
import akka.stream.Materializer;

import io.cloudstate.protocol.StatelessFunction;
import io.cloudstate.protocol.StatelessFunctionClientPowerApi;
import io.grpc.ManagedChannel;
import io.grpc.MethodDescriptor;

import static io.cloudstate.protocol.StatelessFunction.Serializers.*;

import scala.concurrent.ExecutionContext;


import akka.grpc.javadsl.SingleResponseRequestBuilder;
import akka.grpc.javadsl.StreamResponseRequestBuilder;


public abstract class StatelessFunctionClient extends StatelessFunctionClientPowerApi implements StatelessFunction, AkkaGrpcClient {
  public static final io.cloudstate.protocol.StatelessFunctionClient create(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
    return new DefaultStatelessFunctionClient(settings, mat, ec);
  }

  protected final static class DefaultStatelessFunctionClient extends io.cloudstate.protocol.StatelessFunctionClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultStatelessFunctionClient(GrpcClientSettings settings, Materializer mat, ExecutionContext ec) {
        this.settings = settings;
        this.mat = mat;
        this.ec = ec;
        this.clientState = new ClientState(settings, mat, ec);
        this.options = NettyClientUtils.callOptions(settings);

        if (mat instanceof ActorMaterializer) {
          ((ActorMaterializer) mat).system().getWhenTerminated().whenComplete((v, e) -> close());
        }
      }

  
    
      private final SingleResponseRequestBuilder<io.cloudstate.protocol.FunctionProto.FunctionCommand, io.cloudstate.protocol.FunctionProto.FunctionReply> handleUnaryRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
        return new JavaUnaryRequestBuilder<>(handleUnaryDescriptor, channel, options, settings, ec);
      }
    
  
    
      
        
          private final SingleResponseRequestBuilder<akka.stream.javadsl.Source<io.cloudstate.protocol.FunctionProto.FunctionCommand, akka.NotUsed>, io.cloudstate.protocol.FunctionProto.FunctionReply> handleStreamedInRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
            return new JavaClientStreamingRequestBuilder<>(
                                 handleStreamedInDescriptor, "cloudstate.function.StatelessFunction.handleStreamedIn", channel, options, settings, mat, ec);
          }
        
      
    
  
    
      
        
          private final StreamResponseRequestBuilder<io.cloudstate.protocol.FunctionProto.FunctionCommand, io.cloudstate.protocol.FunctionProto.FunctionReply> handleStreamedOutRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
            return new JavaServerStreamingRequestBuilder<>(
                                 handleStreamedOutDescriptor, "cloudstate.function.StatelessFunction.handleStreamedOut", channel, options, settings, ec);
          }
        
      
    
  
    
      
        
          private final StreamResponseRequestBuilder<akka.stream.javadsl.Source<io.cloudstate.protocol.FunctionProto.FunctionCommand, akka.NotUsed>, io.cloudstate.protocol.FunctionProto.FunctionReply> handleStreamedRequestBuilder(scala.concurrent.Future<ManagedChannel> channel){
            return new JavaBidirectionalStreamingRequestBuilder<>(
                                 handleStreamedDescriptor, "cloudstate.function.StatelessFunction.handleStreamed", channel, options, settings, ec);
          }
        
      
    
  

      

        /**
         * For access to method metadata use the parameterless version of handleUnary
         */
        public java.util.concurrent.CompletionStage<io.cloudstate.protocol.FunctionProto.FunctionReply> handleUnary(io.cloudstate.protocol.FunctionProto.FunctionCommand request) {
          return handleUnary().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer handleUnary(io.cloudstate.protocol.FunctionProto.FunctionCommand) if possible.
         */
        
          public SingleResponseRequestBuilder<io.cloudstate.protocol.FunctionProto.FunctionCommand, io.cloudstate.protocol.FunctionProto.FunctionReply> handleUnary()
        
        {
          return clientState.withChannel( this::handleUnaryRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of handleStreamedIn
         */
        public java.util.concurrent.CompletionStage<io.cloudstate.protocol.FunctionProto.FunctionReply> handleStreamedIn(akka.stream.javadsl.Source<io.cloudstate.protocol.FunctionProto.FunctionCommand, akka.NotUsed> request) {
          return handleStreamedIn().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer handleStreamedIn(io.cloudstate.protocol.FunctionProto.FunctionCommand) if possible.
         */
        
          public SingleResponseRequestBuilder<akka.stream.javadsl.Source<io.cloudstate.protocol.FunctionProto.FunctionCommand, akka.NotUsed>, io.cloudstate.protocol.FunctionProto.FunctionReply> handleStreamedIn()
        
        {
          return clientState.withChannel( this::handleStreamedInRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of handleStreamedOut
         */
        public akka.stream.javadsl.Source<io.cloudstate.protocol.FunctionProto.FunctionReply, akka.NotUsed> handleStreamedOut(io.cloudstate.protocol.FunctionProto.FunctionCommand request) {
          return handleStreamedOut().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer handleStreamedOut(io.cloudstate.protocol.FunctionProto.FunctionCommand) if possible.
         */
        
          public StreamResponseRequestBuilder<io.cloudstate.protocol.FunctionProto.FunctionCommand, io.cloudstate.protocol.FunctionProto.FunctionReply> handleStreamedOut()
        
        {
          return clientState.withChannel( this::handleStreamedOutRequestBuilder);
        }
      

        /**
         * For access to method metadata use the parameterless version of handleStreamed
         */
        public akka.stream.javadsl.Source<io.cloudstate.protocol.FunctionProto.FunctionReply, akka.NotUsed> handleStreamed(akka.stream.javadsl.Source<io.cloudstate.protocol.FunctionProto.FunctionCommand, akka.NotUsed> request) {
          return handleStreamed().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer handleStreamed(io.cloudstate.protocol.FunctionProto.FunctionCommand) if possible.
         */
        
          public StreamResponseRequestBuilder<akka.stream.javadsl.Source<io.cloudstate.protocol.FunctionProto.FunctionCommand, akka.NotUsed>, io.cloudstate.protocol.FunctionProto.FunctionReply> handleStreamed()
        
        {
          return clientState.withChannel( this::handleStreamedRequestBuilder);
        }
      

      
        private static MethodDescriptor<io.cloudstate.protocol.FunctionProto.FunctionCommand, io.cloudstate.protocol.FunctionProto.FunctionReply> handleUnaryDescriptor =
          MethodDescriptor.<io.cloudstate.protocol.FunctionProto.FunctionCommand, io.cloudstate.protocol.FunctionProto.FunctionReply>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("cloudstate.function.StatelessFunction", "handleUnary"))
            .setRequestMarshaller(new ProtoMarshaller<io.cloudstate.protocol.FunctionProto.FunctionCommand>(FunctionCommandSerializer))
            .setResponseMarshaller(new ProtoMarshaller<io.cloudstate.protocol.FunctionProto.FunctionReply>(FunctionReplySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<io.cloudstate.protocol.FunctionProto.FunctionCommand, io.cloudstate.protocol.FunctionProto.FunctionReply> handleStreamedInDescriptor =
          MethodDescriptor.<io.cloudstate.protocol.FunctionProto.FunctionCommand, io.cloudstate.protocol.FunctionProto.FunctionReply>newBuilder()
            .setType(
  
  MethodDescriptor.MethodType.CLIENT_STREAMING 
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("cloudstate.function.StatelessFunction", "handleStreamedIn"))
            .setRequestMarshaller(new ProtoMarshaller<io.cloudstate.protocol.FunctionProto.FunctionCommand>(FunctionCommandSerializer))
            .setResponseMarshaller(new ProtoMarshaller<io.cloudstate.protocol.FunctionProto.FunctionReply>(FunctionReplySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<io.cloudstate.protocol.FunctionProto.FunctionCommand, io.cloudstate.protocol.FunctionProto.FunctionReply> handleStreamedOutDescriptor =
          MethodDescriptor.<io.cloudstate.protocol.FunctionProto.FunctionCommand, io.cloudstate.protocol.FunctionProto.FunctionReply>newBuilder()
            .setType(
  
  
   MethodDescriptor.MethodType.SERVER_STREAMING 
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("cloudstate.function.StatelessFunction", "handleStreamedOut"))
            .setRequestMarshaller(new ProtoMarshaller<io.cloudstate.protocol.FunctionProto.FunctionCommand>(FunctionCommandSerializer))
            .setResponseMarshaller(new ProtoMarshaller<io.cloudstate.protocol.FunctionProto.FunctionReply>(FunctionReplySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<io.cloudstate.protocol.FunctionProto.FunctionCommand, io.cloudstate.protocol.FunctionProto.FunctionReply> handleStreamedDescriptor =
          MethodDescriptor.<io.cloudstate.protocol.FunctionProto.FunctionCommand, io.cloudstate.protocol.FunctionProto.FunctionReply>newBuilder()
            .setType(
  
  
  
  MethodDescriptor.MethodType.BIDI_STREAMING 
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("cloudstate.function.StatelessFunction", "handleStreamed"))
            .setRequestMarshaller(new ProtoMarshaller<io.cloudstate.protocol.FunctionProto.FunctionCommand>(FunctionCommandSerializer))
            .setResponseMarshaller(new ProtoMarshaller<io.cloudstate.protocol.FunctionProto.FunctionReply>(FunctionReplySerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



